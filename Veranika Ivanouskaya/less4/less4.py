'''Задача 1
А роза упала на лапу Азора 4.0 Вернёмся к палиндромам — числам, словам и предложениям, которые читаются одинаково в оба направления. Напишите программу, которая определяет, относится ли введённая строка к палиндромам.

Формат ввода Вводится строка.

Формат вывода Требуется вывести YES — если введенная строка является палиндромом, иначе – NO.

Ввод мама Вывод NO

Ввод анна Вывод YES'''


def palindrome(string):
    string = string.lower()
    string = string.replace(" ", "")
    if string == string[::-1]:
        return "Yes"
    else:
        return "No"


new_input = input("Введите строку: ")
result = palindrome(new_input)
print(result)

'''Задача 2
Очередное путешествие родителей с детьми, очередная игра с поиском зверушек за окном. Давайте поиграем и найдём заек.

Формат ввода В первой строке записано натуральное число N — количество выделенных придорожных местностей. В каждой из N последующих строк записано описание придорожной местности.

Формат вывода Количество заек.

Ввод

3

березка елочка зайка волк березка

сосна зайка сосна елочка зайка медведь

сосна сосна сосна белочка сосна белочка

Вывод

3'''


def count_rabit(descriptions):
    N = int(input("Введите количество выделенных придорожных местностей: "))

    for description in descriptions:
        N += description.count("зайка")

    return N


descriptions = [
    "березка елочка зайка волк березка",
    "сосна зайка сосна елочка зайка медведь",
    "сосна сосна сосна белочка сосна белочка"
]

result = count_rabit(descriptions)
print(result)

'''Задача 3
А и Б сидели на трубе Сложение чисел весьма простая задача. К сожалению, пользователи не всегда вводят данные так, как нам удобно.

Формат ввода Два целых числа, разделённые пробелом.

Формат вывода Одно целое число — сумма переданных чисел.

Ввод

2 2

Вывод

4'''


def add_numbers(input_string):
    numbers = input_string.split()
    a = int(numbers[0])
    b = int(numbers[1])
    return a + b


input_string = "2 2"
print(add_numbers(input_string))


'''Задача 4
RLE означает “run-length encoding”. Это способ сокращённой записи последовательности чего угодно (в случае этой задачи — цифр). При нём для подряд идущей группы одинаковых цифр (run) записываются сама эта цифра и длина этой группы (run length). Таким образом, 99999 превратится в 9 5 («девять пять раз») и так далее. RLE широко используется в самых разных областях. Напишите программу, которая кодирует строку цифр в RLE.

Формат ввода Строка цифр длиной не меньше 1.

Формат вывода Пары: сама цифра и количество повторений цифры подряд во введённой строке, как описано в условии и показано в примере.'''


def run_length_encoding(num):
    if len(num) < 1:
        return "Ошибка: Строка должна быть длиной не менее 1 символа."

    encoded_result = ""
    current_char = num[0]
    count = 1

    for i in range(1, len(num)):
        if num[i] == current_char:
            count += 1
        else:
            encoded_result += f"{current_char} {count}\n"
            current_char = num[i]
            count = 1

    return encoded_result


num = "010000100001111111110111110000000000000011111111"
print(run_length_encoding(num))

'''Задача 5
Польский калькулятор Напишите программу, которая производит вычисление выражения, записанного в обратной польской нотации (ОПН).

В ОПН нет ни скобок, ни приоритета операторов («умножение раньше сложения»).

Чтобы прочитать выражение, записанное в таком формате, нужно просматривать выражение строго последовательно. Вводимые значения последовательно добавляются в стек. Когда встречается символ операции, то из стека извлекаются последние положенные туда значения, с ними проделывается эта операция и результат возвращается в стек.

Если для операции важен порядок значений, с которыми она производится, то первым идёт число, лежавшее в стеке глубже. В частности, если операция — вычитание, то из предпоследнего числа в стеке вычитается последнее, а не наоборот.

Изначально стек пустой, в результате полного вычисления выражения в нём должно остаться одно значение — результат вычислений.

Первый пример следует читать так: в стек последовательно добавляются значения 7 2 3, а затем встречаем знак операции *. Тогда значения 2 и 3 извлекаются, перемножаются, результат 6 кладётся обратно в стек. Следующий знак извлекает из стека два оставшихся в нём значения 7 и 6, вычитает одно из другого и кладёт результат снова в стек. Выражение закончилось, в стеке одно число — 1, это и есть результат вычисления.

Формат ввода Вводится одна строка, содержащая разделённые пробелами целые числа и знаки операций +, -, *, которые вместе составляют корректное выражение в обратной польской нотации.

Формат вывода Выводится одно целое число — результат вычисления выражения.

Ввод'''


def calculate_rpn(expression):
    stack = []

    operators = {'+': lambda x, y: x + y,
                 '-': lambda x, y: x - y,
                 '*': lambda x, y: x * y}

    elements = expression.split()

    for element in elements:
        if element.isdigit() or (element[0] == '-' and element[1:].isdigit()):
            stack.append(int(element))
        elif element in operators:
            if len(stack) < 2:
                return "Недостаточно операндов для оператора."
            operand1 = stack.pop()
            operand2 = stack.pop()
            result = operators[element](operand1, operand2)
            stack.append(result)
        else:
            return "Недопустимый элемент в выражении."

    if len(stack) != 1:
        return "Неверное количество операндов в выражении."

    return stack[0]


input_expression = input("Введите выражение в обратной польской нотации: ")
print(calculate_rpn(input_expression))

'''Задача 6
Напишем программу, которая поможет быстро выяснить, сколько детей любят только одну кашу.

Формат ввода В первых двух строках указывается количество детей, любящих манную и овсяную каши ( N и M). Затем идут N+M строк — перемешанные фамилии детей. Гарантируется, что в группе нет однофамильцев.

Формат вывода Количество учеников, которые любят только одну кашу. Если таких не окажется, в строке вывода нужно написать «Таких нет».

'''


def count_kasha_lovers(n, m, manna_lovers, ovs_lovers):
    manna_lovers_set = set(manna_lovers)
    ovs_lovers_set = set(ovs_lovers)
    only_manna_lovers = manna_lovers_set - ovs_lovers_set
    only_ovs_lovers = ovs_lovers_set - manna_lovers_set
    result = len(only_manna_lovers) + len(only_ovs_lovers)

    if result == 0:
        return "Таких нет"
    else:
        return result


n = 3
m = 2
manna_lovers = ["Васильев", "Петров", "Васечкин"]
ovs_lovers = ["Иванов", "Михайлов"]
result = count_kasha_lovers(n, m, manna_lovers, ovs_lovers)
print(result)

















