"""
Задача 2.3. KNN
В этом задании Вам предлагается написать класс KNN_classifier, пригодный для решения 
задачи классификации (многоклассовой).

Мы предлагаем Вам шаблон класса. В этом шаблоне заполните тела функций .fit и .predict

В качестве функции близости используйте Евклидово расстояние между объектами 
(подробнее https://numpy.org/doc/stable/reference/generated/numpy.linalg.norm.html).

Напоминание:

Функция .fit(x, y) производит обучение модели. В рамках этой функции необходимо реализовать
 подбор оптимальных параметров модели/сконфигурировать модель для дальнейшего использования 
 на основе данной тренировочной выборки, где x - это матрица признакового описания выборки, а y - вектор ответов.

Функция .predict(x) осуществляет предсказание для каждого из объектов,
 чьи векторные описания представлены строками матрицы x. Выполняется строго после .fit(). 
 Ради безопасности можно даже реализовать механизм отказа в виде выбрасывания специальной ошибки UnfittedError 
 в случае попытки вызова функции .predict() до вызова функции .fit().

Шаблон класса:
"""

import numpy as np




class KNN_classifier:
    def __init__(self, n_neighbors: int, **kwargs):
        self.K = n_neighbors
        self.X_train = None
        self.y_train = None

    def fit(self, x: np.array, y: np.array):
        self.X_train = x
        self.y_train = y

    def predict(self, X: np.array):
        predictions = []
        for sample in X:
            distances = np.linalg.norm(self.X_train - sample, axis=1)
            indices = np.argsort(distances)[:self.K]
            unique_labels, counts = np.unique(self.y_train[indices], return_counts=True)
            print(f"unique_labels, counts {unique_labels}, {counts}")
            predicted_label = unique_labels[np.argmax(counts)]
            predictions.append(predicted_label)
        return np.array(predictions)
        
"""    
Примечания
Вы можете проверить правильность выполнения задания посредством сравнения полученных результатов с функцией из соответствующего модуля sklearn.

В рамках выполнения данного задания запрещено использовать функции из пакета sklearn и любого другого, кроме numpy.

Подсказка: если Вы испытываете сложности с реализацией этого задания, начните выполнять его с написания функции .predict. В процессе написания этой функции Вы поймёте, что конкретно Вам требуется получить от обучающей выборки, какую информацию и в каком виде извлечь из неё. Затем реализуйте это в функции .fit

Пример входных и выходных данных
"""
X=np.array([[ 0.56510722,  0.68599596, -0.92388505, -0.29546048, -0.12437532],
       [-0.79617537,  0.98406791,  1.19542652, -0.05626863, -0.69868076],
       [ 0.9629688 , -1.00423925, -0.53842833, -0.23744358,  0.83226685],
       [ 0.24671269, -0.41624448,  0.81679337,  1.59227446,  0.16192583],
       [-0.36972363,  0.17425997,  1.33668078,  1.16687907,  0.31709134],
       [-1.30482844, -0.05354323, -0.88862186, -1.121785  , -0.78442809],
       [-0.53975018,  0.90074877, -1.09317408,  1.52989481, -0.43375015],
       [-0.64709803, -0.09775791,  1.3506503 , -1.46957788,  1.63325543],
       [-0.73858464, -0.60678229,  0.31420272, -0.43100129, -0.37665876],
       [-0.29208809, -0.68795722,  0.06586655,  0.9583851 ,  1.70640775]])

y=np.array([1, 0, 0, 1, 0, 1, 0, 1, 0, 1])

knn = KNN_classifier(n_neighbors=3)
     

knn.fit(X, y)
     

x_test=np.array([[-0.12489725,  0.65791923, -0.73112495,  1.42660225,  1.64728976],
       [ 0.01913388, -1.11351208, -0.63244098, -0.98121107,  0.38060892],
       [-0.92074931,  1.39812225,  0.39692147,  0.7717827 ,  0.44604002]])

print(knn.predict(x_test))
"""     
array([1, 0, 0])
"""

     